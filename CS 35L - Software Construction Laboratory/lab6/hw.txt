1) The network would still be secure, even if the other team were observing the 
bytes going across the network. This is because all the bytes are encrypted 
using public keys, and can only be decrypted by my/my partner's private keys. 
As long as the other team don't know our private keys, the network is still 
secure.
If the other team had tapped our keyboards, our networks would still be secure. 
This is because the keys generated are unique, and don't vary depending on the 
commands we enter into the keyboard. The keys would never be entered in the 
keyboard.
If the other team had physical control of the USB from which we were booting, 
then it could monitor the files on our filesystem. As a result, they could 
access the private keys stored in our .ssh directories, and could decrypt the 
messages that were encoded with our private keys. As a result, our network 
would not be secure.

2) "gpg --verify" verifies a signature - this means that it proves that the 
encrypted hash generated from the original file/sender's private key matches 
the hash generated from the received file/sender's public key. If the hash does 
not match, it means the file was not modified after it was sent. However, the 
keys could have been generated by anybody. We need a certificate authority to 
generate a digital certificate that verifies the public key does belong to the 
sender.
