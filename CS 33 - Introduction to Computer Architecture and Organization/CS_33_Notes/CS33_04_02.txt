04-01-2015
Usually between 8 and 120 registers
Registers are usually 32 or 64 bit (x86 is 32 bit, and x8664 is 64 bit)
    Registers are used to compute addresses
    What is the advantage of 32 bit?
        faster per operation - faster to add or subtract or operate on things
    What is the advantage of 64 bit?
        can hold longer addresses (more locations)/more memory

                                        PDP11   # bits        
unsigned char           signed char     8       8           (on x86, char is
unsigned short          short           16      16
unsigned int            int             16      32
unsigned long           long            32      32
unsigned long long      long long       x       64
^                       ^
overflow wraps          overflow is trickier
around mod 2^32         v
                        v
~~~~~~~~~~~~~~~~~~~~~~~~
1) used unsigned arithmetic internally, wraps around mod 2^32
    gcc -fwrapv
2) dump core (dies)
    gcc -ftrapv
3) undefined behaviour, let compiler do w/e it wants
    gcc

There are SPARC and x86 architectures
Each architecture is "big" or "little" endianness
    Little endian: least significant byte of a multibyte value to the lowest numbered memory location
    Big endian: most significant byte of a multibyte value to the greatest numbered memory location

To store "abcd\0"
Big Endianness: in SPARC, addresses count forwards
_____________________
|_a_|_b_|_c_|_d_|_\0_|
  1   2   3   4   5
Little Endianness: in x86, the addresses count backwards
_____________________
|_\0_|_d_|_c_|_b_|_a_|
   5   4   3   2   1
When computers over network communicate, they convert their data to a network standard to make sure the big/little endianness doesn't matter


byte addressable memory - everything is 8 bits long
"load byte" loads 8 bits
"load short" loads 16 bits instead (2 bytes)

int v = 0xdadacafe;
for (char c: v){
    print c;
}
on an x86 this prints       fecadada (every 2 bytes)
sparc this prints           dadacafe

sizeof() tells you size of variable in byte

two's complement of arithmetic
    you have one more negative value than positive value
    INT_MIN = -1 - INT_MAX

Shift Operations
x                   01100011    10010101
x << 4              00110000    01010000    (left shift)
x >> 4 (logical)    00000110    00001001    (right shift)
x >> 4 (arithmetic) 00000110    11111001

Blank fills with 0's when doing logical right shift, however MSB fills in with arithmetic right shift

x       !x      !!x
00      1       0
01      0       1
10      0       1
11      0       1

binary operator &
x       1001 1011 1010 1101
0xFF    0000 0000 1111 1111
0xFF00  1111 1111 0000 0000
so x & 0xFF would be 0000 1010 1101
takes each bit, only returns 1 if both are 1, else returns 0
masking by 0xFF lets you find the last 2 bytes
masking by 0xFF00 lets you find the first 2 bytes
